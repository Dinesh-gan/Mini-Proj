{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8113830,"sourceType":"datasetVersion","datasetId":4793400},{"sourceId":8116768,"sourceType":"datasetVersion","datasetId":4795588}],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"IMPORTING NECESSARY PACKAGES","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nimport pydicom\nimport PIL\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pathlib\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D ,BatchNormalization\nimport shutil\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def copy_directory(src_dir, dst_dir):\n    if os.path.exists(dst_dir):\n        shutil.rmtree(dst_dir)\n        \n    for filename in os.listdir(src_dir):\n        src_file = os.path.join(src_dir, filename)\n        dst_file = os.path.join(dst_dir, filename)\n        \n        if os.path.isfile(src_file):\n            shutil.copy(src_file, dst_file)\n        else:\n            shutil.copytree(src_file, dst_file)\n\nsrc_dir = '/kaggle/input/bcn20000-32x/train-test-split'\ndst_dir = '/kaggle/working/train-test-split'\n\ncopy_directory(src_dir, dst_dir)\nprint(len(os.listdir(\"/kaggle/working/train-test-split/train/melanoma\")))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def copy__directory(src_dir, dst_dir):\n\n    if not os.path.exists(dst_dir):\n        os.makedirs(dst_dir)\n\n    for filename in os.listdir(src_dir):\n        src_file = os.path.join(src_dir, filename)\n        dst_file = os.path.join(dst_dir, filename)\n        \n        if os.path.isfile(dst_file):\n            base, extension = os.path.splitext(filename)\n            i = 1\n            while os.path.isfile(os.path.join(dst_dir, f\"{base}_{i}{extension}\")):\n                i += 1\n            dst_file = os.path.join(dst_dir, f\"{base}_{i}{extension}\")\n        \n        # Copy the file\n        shutil.copy(src_file, dst_file)\n\nsrc_dir = '/kaggle/input/generated/generated'\ndst_dir = '/kaggle/working/train-test-split/train/melanoma'\n\ncopy__directory(src_dir, dst_dir)\nprint(len(os.listdir(\"/kaggle/working/train-test-split/train/melanoma\")))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nprint(\"Train\")\nprint(len(os.listdir(\"/kaggle/working/train-test-split/train/nevus\")))\n\nprint(len(os.listdir(\"/kaggle/working/train-test-split/train/melanoma\")))\nprint()\nprint(\"Test\")\nprint(len(os.listdir(\"/kaggle/input/bcn20000-32x/train-test-split/test/nevus\")))\n\nprint(len(os.listdir(\"/kaggle/input/bcn20000-32x/train-test-split/test/melanoma\")))\n\nprint(\"Validation\")\nprint(len(os.listdir(\"/kaggle/input/bcn20000-32x/train-test-split/validation/nevus\")))\n\nprint(len(os.listdir(\"/kaggle/input/bcn20000-32x/train-test-split/validation/melanoma\")))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"CONSTANTS FOR DENSENET","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.applications import DenseNet201 \nfrom tensorflow.keras.optimizers import SGD\nfrom tensorflow.keras.layers import Resizing, Rescaling, RandomFlip, RandomRotation, RandomZoom, RandomContrast\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.metrics import Recall","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"batch_size = 32\nimg_height = 32\nimg_width = 32\nchannels = 3","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    r'/kaggle/working/train-test-split/train',\n    shuffle=True,\n    image_size=(img_height, img_width),\n    batch_size=batch_size\n)\n\nval_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    r'/kaggle/working/train-test-split/validation',\n    shuffle=True,\n    image_size=(img_height, img_width),\n    batch_size=batch_size\n)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_augmentation = Sequential([\n    RandomFlip('horizontal'),\n    RandomRotation(0.2), \n    RandomZoom(0.2),  \n    RandomContrast(0.2) \n])\n\nresize_and_rescale = Sequential([\n    Resizing(img_height, img_width),\n    Rescaling(1.0 / 255)\n])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class_names = train_ds.class_names\nn_classes = len(class_names)\n\nbase_model = DenseNet201(weights='imagenet', include_top=False, input_shape=(img_height, img_width, channels)) \n\nbase_model.trainable = True\n\nmodel = Sequential([\n    resize_and_rescale,\n    data_augmentation,\n    base_model,\n    Flatten(),\n    Dense(1024, activation='relu'),\n    Dropout(0.5),\n    Dense(512, activation='relu'),\n    Dropout(0.5),\n    Dense(n_classes, activation='softmax')\n])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.compile(optimizer=SGD(), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nepochs = 150\ntrained = model.fit(train_ds, validation_data=val_ds, epochs=epochs)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"TRAINING ACCURACY","metadata":{}},{"cell_type":"code","source":"trained.history['accuracy']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"VALIDATION ACCURACY","metadata":{}},{"cell_type":"code","source":"trained.history['val_accuracy']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"TEST ACCURACY","metadata":{}},{"cell_type":"code","source":"test_dataset_path = r'/kaggle/working/train-test-split/test'\ntest_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    test_dataset_path,\n    shuffle=False,\n    image_size=(img_height, img_width),\n    batch_size=batch_size\n)\n\ntest_loss, test_accuracy = model.evaluate(test_ds)\n\nprint(\"Test Accuracy:\", test_accuracy)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"RESULTS","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import classification_report, confusion_matrix, matthews_corrcoef\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nY_true = []\nY_pred_classes = []\n\nfor images, labels in test_ds:\n    Y_pred = model.predict(images)\n    Y_pred_classes.extend(np.argmax(Y_pred, axis = 1))\n    Y_true.extend(labels.numpy())\n\nY_true = np.array(Y_true)\nY_pred_classes = np.array(Y_pred_classes)\n\nclassification_rep = classification_report(Y_true, Y_pred_classes, target_names=class_names)\nprint('Classification Report:')\nprint(classification_rep)\n\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \nprint('Confusion Matrix:')\nsns.heatmap(confusion_mtx, annot=True, cbar = False, square = True, fmt = 'd', cmap = 'Blues')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()\n\nmcc = matthews_corrcoef(Y_true, Y_pred_classes)\nprint('Matthews Correlation Coefficient:', mcc)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}